goal_symbol : compilation
pragma : PRAGMA identifier ; | PRAGMA simple_name ( pragma_arg_s ) ;
pragma_arg_s : pragma_arg pragma_arg_s_l
pragma_arg_s_l : , pragma_arg pragma_arg_s_l | e
pragma_arg : expression | simple_name RIGHT_SHAFT expression
pragma_s : pragma_s_l
pragma_s_l : pragma pragma_s_l | e
decl : object_decl | number_decl | type_decl | subtype_decl | subprog_decl | pkg_decl | task_decl | prot_decl | exception_decl | rename_decl | generic_decl | body_stub | error ;
object_decl : def_id_s : object_qualifier_opt object_subtype_def init_opt ;
def_id_s : def_id def_id_s_l
def_id_s_l : , def_id def_id_s_l | e
def_id  : identifier
object_qualifier_opt : ALIASED | CONSTANT | ALIASED CONSTANT | e
object_subtype_def : subtype_ind | array_type
init_opt : IS_ASSIGNED expression | e
number_decl : def_id_s DOT_DOT CONSTANT IS_ASSIGNED expression ;
type_decl : TYPE identifier discrim_part_opt type_completion ;
discrim_part_opt : | discrim_part | ( BOX ) | e
type_completion : IS type_def | e
type_def : enumeration_type | integer_type | real_type | array_type | record_type | access_type | derived_type | private_type
subtype_decl : SUBTYPE identifier IS subtype_ind ;
subtype_ind : name constraint | name
constraint : range_constraint | decimal_digits_constraint
decimal_digits_constraint : DIGITS expression range_constr_opt
derived_type : NEW subtype_ind | NEW subtype_ind WITH PRIVATE | NEW subtype_ind WITH record_def | ABSTRACT NEW subtype_ind WITH PRIVATE | ABSTRACT NEW subtype_ind WITH record_def
range_constraint : RANGE range
range : simple_expression DOT_DOT simple_expression | name TIC RANGE | name TIC RANGE ( expression )
enumeration_type : ( enum_id_s )
enum_id_s : enum_id enum_id_s_l
enum_id_s_l : , enum_id enum_id_s_l | e
enum_id : identifier | char_lit
integer_type : range_spec | MOD expression
range_spec : range_constraint
range_spec_opt : range_spec | e
real_type : float_type | fixed_type
float_type : DIGITS expression range_spec_opt
fixed_type : DELTA expression range_spec | DELTA expression DIGITS expression range_spec_opt
array_type : unconstr_array_type | constr_array_type
unconstr_array_type : ARRAY ( index_s ) OF component_subtype_def
constr_array_type : ARRAY iter_index_constraint OF component_subtype_def
component_subtype_def : aliased_opt subtype_ind
aliased_opt : ALIASED | e
index_s : index index_s_l
index_s_l : , index index_s_l | e
index : name RANGE BOX
iter_index_constraint : ( iter_discrete_range_s )
iter_discrete_range_s : discrete_range iter_discrete_range_s_l
iter_discrete_range_s_l : , discrete_range iter_discrete_range_s_l | e
discrete_range : name range_constr_opt | range
range_constr_opt : range_constraint | e
record_type : tagged_opt limited_opt record_def
record_def : RECORD pragma_s comp_list END RECORD | NULL RECORD
tagged_opt : TAGGED | ABSTRACT TAGGED | e
comp_list : comp_decl_s variant_part_opt | variant_part pragma_s | NULL ; pragma_s
comp_decl_s : comp_decl comp_decl_s_l
comp_decl_s_l : pragma_s comp_decl comp_decl_s_l | e
variant_part_opt : pragma_s | pragma_s variant_part pragma_s
comp_decl : def_id_s DOT_DOT component_subtype_def init_opt ; | error ;
discrim_part : ( discrim_spec_s )
discrim_spec_s : discrim_spec discrim_spec_s_l
discrim_spec_s_l : ; discrim_spec discrim_spec_s_l | e
discrim_spec : def_id_s DOT_DOT access_opt mark init_opt | error
access_opt : ACCESS | e
variant_part : CASE simple_name IS pragma_s variant_s END CASE ;
variant_s : variant variant_s_l
variant_s_l : variant variant_s_l | e
variant : WHEN choice_s RIGHT_SHAFT pragma_s comp_list
choice_s : choice choice_s_l
choice_s_l : PIPE choice choice_s_l | e
choice : expression | discrete_with_range | OTHERS
discrete_with_range : name range_constraint | range
access_type : ACCESS subtype_ind | ACCESS CONSTANT subtype_ind | ACCESS ALL subtype_ind | ACCESS prot_opt PROCEDURE formal_part_opt | ACCESS prot_opt FUNCTION formal_part_opt RETURN mark
prot_opt : PROTECTED | e
decl_part : decl_item_or_body_s1 | e
decl_item_s : decl_item_s1
decl_item_s1 : decl_item decl_item_s1_l
decl_item_s1_l : decl_item decl_item_s1_l | e
decl_item : decl | use_clause | rep_spec | pragma
decl_item_or_body_s1 : decl_item_or_body decl_item_or_body_s1_l
decl_item_or_body_s1_l : decl_item_or_body decl_item_or_body_s1_l | e
decl_item_or_body : body | decl_item
body : subprog_body | pkg_body | task_body | prot_body
name : simple_name | indexed_comp | selected_comp | attribute | operator_symbol
mark : simple_name mark_l
mark_l : TIC attribute_id mark_l | . simple_name mark_l | e
simple_name : identifier
c_name_list : compound_name c_name_list_l
c_name_list_l : , compound_name c_name_list_l | e
compound_name : simple_name compound_name_l
compound_name_l : . simple_name compound_name_l | e
used_char : char_lit
operator_symbol : char_string
indexed_comp : name ( value_s )
value_s : value value_s_l
value_s_l : , value value_s_l | e
value : expression | comp_assoc | discrete_with_range | error
selected_comp : name . simple_name | name . used_char | name . operator_symbol | name . ALL
attribute : name TIC attribute_id
attribute_id : identifier | DIGITS | DELTA | ACCESS
literal : numeric_lit | used_char | NULL
aggregate : ( comp_assoc ) | ( value_s_2 ) | ( expression WITH value_s ) | ( expression WITH NULL RECORD ) | ( NULL RECORD )
value_s_2 : value , value value_s_2_l
value_s_2_l : , value value_s_2_l | e
comp_assoc : choice_s RIGHT_SHAFT expression
expression : relation expression_l
expression_l : logical relation expression_l | short_circuit relation expression_l | e
logical : AND | OR | XOR
short_circuit : AND THEN | OR ELSE
relation : simple_expression | simple_expression relational simple_expression | simple_expression membership range | simple_expression membership name
relational : = | NE | < | LT_EQ | > | GE
membership : IN | NOT IN
simple_expression : unary term | term | simple_expression adding 
unary : + | -
adding : + | - | &
term : factor term_l
term_l : multiplying factor term_l | e
multiplying : * | / | MOD | REM
factor : primary | NOT primary | ABS primary | primary EXPON primary
primary : literal | name | allocator | qualified | parenthesized_primary
parenthesized_primary : aggregate | ( expression )
qualified : name TIC parenthesized_primary
allocator : NEW name | NEW qualified
statement_s : statement statement_s_l
statement_s_l : statement statement_s_l | &
statement : unlabeled | label statement
unlabeled : simple_stmt | compound_stmt | pragma
simple_stmt : null_stmt | assign_stmt | exit_stmt | return_stmt | goto_stmt | procedure_call | delay_stmt | abort_stmt | raise_stmt | code_stmt | requeue_stmt | error ;
compound_stmt : if_stmt | case_stmt | loop_stmt | block | accept_stmt | select_stmt
label : LT_LT identifier GT_GT
null_stmt : NULL ;
assign_stmt : name IS_ASSIGNED expression ;
if_stmt : IF cond_clause_s else_opt END IF ;
cond_clause_s : cond_clause cond_clause_s_l
cond_clause_s_l : ELSIF cond_clause cond_clause_s_l | &
cond_clause : cond_part statement_s
cond_part : condition THEN
condition : expression
else_opt : ELSE statement_s | e
case_stmt : case_hdr pragma_s alternative_s END CASE ;
case_hdr : CASE expression IS
alternative_s : e
alternative_s_l : alternative alternative_s_l | e
alternative : WHEN choice_s RIGHT_SHAFT statement_s
loop_stmt : label_opt iteration basic_loop id_opt ;
label_opt : identifier DOT_DOT | e
use_clause : USE name_s ; USE TYPE name_s ;
private_opt : PRIVATE | &
unit : pkg_decl | pkg_body | subprog_decl | subprog_body | subunit | generic_decl | rename_unit
pkg_decl : pkg_spec ; | generic_pkg_inst ;
pkg_body : PACKAGE BODY compound_name IS decl_part body_opt END c_id_opt ;
subprog_decl : subprog_spec ; | generic_subp_inst ; | subprog_spec_is_push ABSTRACT ;
subprog_body : subprog_spec_is_push decl_part block_body END id_opt ;
subunit : SEPARATE ( compound_name ) subunit_body
generic_decl : generic_formal_part subprog_spec ; | generic_formal_part pkg_spec ;
rename_unit : PACKAGE compound_name renames ; | subprog_spec renames ; | generic_formal_part PACKAGE compound_name renames ; | generic_formal_part subprog_spec renames ;
comp_unit : context_spec private_opt unit pragma_s | private_opt unit pragma_s
compilation : compilation_l | pragma pragma_s compilation_l
compilation_l : comp_unit compilation_l | &
use_clause_opt : use_clause_opt_l
use_clause_opt_l : use_clause use_clause_opt_l &
name_s : name name_s_l
name_s_l : , name name_s_l | &
context_spec : with_clause use_clause_opt context_spec_l
context_spec_l : with_clause use_clause_opt context_spec_l | pragma context_spec_l | &
with_clause : WITH c_name_list ;
